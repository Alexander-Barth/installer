#!/bin/bash


tmpdir=$PWD/tmp
mkdir $tmpdir

containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

function build() {
    local configArgs=
    local makeArgs=
    local packageDir=
    local check=no
    local buildsystem=gnu  # gnu (for configure) or cmake

    while [ "$1" != "" ]; do
	case $1 in
	    "--package")
		shift
		package="$1"
		;;
	    "--name")
		shift
		name="$1"
		;;
	    "--packagedir")
		shift
		packageDir="$1"
		;;
	    "--check")
		shift
		check="$1"
		;;
	    "--prefix")
		shift
		prefix="$1"
		;;
	    "--configArgs")
		shift
		configArgs="$1"
		;;
	    "--makeArgs")
		shift
		makeArgs="$1"
		;;
	    "--buildsystem")
		shift
		buildsystem="$1"
		;;
	esac
	shift
    done

    # if sucessful $prefix $name; then
    # 	echo "$name already present in $prefix"
    # 	moduleload $prefix
    # 	return
    # fi

    if [[ $package == ftp* ]] || [[ $package == http* ]]; then
	file=$(basename $package)

	if [ -f $file ]; then
            echo "$package already downloaded"
	else
            echo download $package
            wget $package
	fi
    else
	file=$package
    fi

    if [[ -z $packageDir ]]; then
	packageDir=$(echo $file | sed 's/.tar.*//')
    fi

    rm -Rf $packageDir
    tar -xf $file
    cd $packageDir

    if [ $buildsystem == gnu ]; then
      ./configure --prefix=$prefix  $configArgs | tee configure.log
    else
      cmake -DCMAKE_INSTALL_PREFIX:PATH=$prefix | tee cmake.log
    fi

    make -j $JOBS $makeArgs | tee make.log

    if [[ $check == yes ]]; then
	make check | tee make_check.log
    fi

    make install | tee make_install.log
    cd ..

#    moduleload $prefix
}

PACKAGES=
DIR=/tmp/
JOBS=3
PREFIX=$HOME/local/
CC=gcc
FC=gfortran

ACTION="$1"
shift

while [[ $# -gt 1 ]]; do
key="$1"

case $key in
    -j|--jobs)
    JOBS="$2"
    shift # past argument
    ;;
    -j=*|--jobs=*)
    JOBS="${key#*=}"
    ;;
    -p|--prefix)
    PREFIX="$2"
    shift # past argument
    ;;
    -p=*|--prefix=*)
    PREFIX="${key#*=}"
    ;;
    --fc|--fortran-compiler)
    FC="$2"
    shift # past argument
    ;;
    --fc=*|--fortran-compiler=)
    FC="${key#*=}"
    ;;
    --cc|--c-compiler)
    CC="$2"
    shift # past argument
    ;;
    --cc=*|--c-compiler=)
    CC="${key#*=}"
    ;;
    --verbose)
    VERBOSE=YES
    ;;
    *)
	break
            # unknown option
    ;;
esac
shift # past argument or value
done

PACKAGES=( "$@" )

echo action "${ACTION}"
echo what "${PACKAGES}"
echo JOBS "${JOBS}"
echo VERBOSE "${VERBOSE}"

for arg in "${PACKAGES[@]}"; do
    echo package "$arg"
done

HDF5_VERSION=1.8.15
HDF5_URL=http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-$HDF5_VERSION/src/hdf5-$HDF5_VERSION.tar.gz


NETCDF_VERSION=4.3.3.1
NETCDF_URL=http://www.unidata.ucar.edu/downloads/netcdf/ftp/netcdf-$NETCDF_VERSION.tar.gz

NETCDF_FORTRAN_VERSION=4.4.4
NETCDF_FORTRAN_URL=ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-fortran-$NETCDF_FORTRAN_VERSION.tar.gz



for i in hdf5 netcdf; do
    if containsElement "hdf5" "${PACKAGES[@]}"; then
        build --package $HDF5_URL --prefix $PREFIX --name hdf5 \
	    --configArgs "CC=$CC --enable-shared --enable-static"                
    fi

    if containsElement "netcdf" "${PACKAGES[@]}"; then
	build --package $NETCDF_URL --prefix $PREFIX  --name netcdf --check yes \
	      --configArgs "CC=$CC FC=$FC CPPFLAGS=-I$PREFIX/include  LDFLAGS=-L$PREFIX/lib"	
    fi

    if containsElement "netcdf-fortran" "${PACKAGES[@]}"; then
	build --package $NETCDF_FORTRAN_URL --prefix $PREFIX  --name netcdf --check yes \
	      --configArgs "CC=$CC FC=$FC CPPFLAGS=-I$PREFIX/include  LDFLAGS=-L$PREFIX/lib"	
    fi

done

